@typeparam TItemType
@implements IDisposable

<div class="grid-container">
    @if (Items != null && Items.Any())
    {
        foreach (var item in Items)
        {
            <div class="grid-item" style="width:@ColumnWidth" @onclick="() => OnItemClicked.InvokeAsync(item)">
                @ItemTemplate!(item)
            </div>
        }
    }
    else
    {
        <!-- Here can be used to show how the empty list will be handeled -->
        <h3 class="empty-collection-title">No items available</h3>
    }
</div>

@code {
    [Parameter] public List<TItemType>? Items { get; set; }
    [Parameter] public RenderFragment<TItemType>? ItemTemplate { get; set; }
    [Parameter] public EventCallback<TItemType> OnItemClicked { get; set; }
    [Parameter] public int ColumnsCount { get; set; } = 4;
    private int ColumnWidth => 100 / ColumnsCount;
    
    private DotNetObjectReference<DataListView<TItemType>>? _dotNetObjectReference;
    protected override async Task OnInitializedAsync()
    {
        _dotNetObjectReference = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("triggerOnWindowResized", _dotNetObjectReference);
    }

    public void Dispose()
    {
        _dotNetObjectReference?.Dispose();
    }

    [JSInvokable]
    public void OnWindowResized(int width, int height)
    {
        Console.WriteLine($"New width {width} and the new height {height}");
    }

}