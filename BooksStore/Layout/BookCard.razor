<div style="@BackgroundStyle" @attributes="UserAttributes" class="card">
    <h6>@Book?.Title</h6>

    <p>Author: @Book?.AuthorName Name</p>

    <p>Publishing date: @Book?.PublishingDate</p>

    @if (WithButton)
    {
        <button class="main-button" @onclick="AddToCart">Add to Cart</button>
    }
</div>

@code {

    [CascadingParameter(Name = "BackgroundStyle")]
    public string? BackgroundStyle { get; set; }

    [Parameter] [EditorRequired] public Book? Book { get; set; }
    [Parameter] public bool WithButton { get; set; } = true;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? UserAttributes { get; set; }

    [Parameter] public EventCallback<Book?> OnAddToCartClicked { get; set; }

    private void AddToCart()
    {
        OnAddToCartClicked.InvokeAsync(Book);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(BackgroundStyle), out var value))
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                BackgroundStyle = "background-color:white";
            }
        }

        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        // Fetch data from the API
    }

    // Validate the Book parameter and throws an exception if it's null
    protected override void OnParametersSet()
    {
        if (Book == null)
            throw new ArgumentNullException(nameof(Book));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Make a JavaScript call to manipulate the DOM elements
    }

}